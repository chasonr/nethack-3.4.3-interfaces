From 483e822617cd94a508038fab69853b26014cf67e Mon Sep 17 00:00:00 2001
From: Joshua Kwan <joshk@triplehelix.org>
Date: Thu, 24 Sep 2009 14:21:19 -0700
Subject: Paranoid hit asks you to confirm 'yes' instead of 'y' when hitting
 peacefuls

---
 dat/opthelp       |    3 +++
 doc/Guidebook.mn  |    3 +++
 doc/Guidebook.tex |    4 ++++
 doc/Guidebook.txt |    4 ++++
 include/flag.h    |    3 +++
 src/options.c     |    3 +++
 src/uhitm.c       |   18 ++++++++++++++++++
 7 files changed, 38 insertions(+)

diff --git a/dat/opthelp b/dat/opthelp
index a2d624a..eefd333 100644
--- a/dat/opthelp
+++ b/dat/opthelp
@@ -61,6 +61,9 @@ news       print any news from game administrator on startup      [TRUE]
 Boolean option if MFLOPPY was set at compile time:
 checkspace check free disk space before writing files to disk     [TRUE]
 
+Boolean option if PARANOID was set at compile time:
+paranoid_quit  ask for explicit 'yes' when quitting               [FALSE]
+
 Boolean option if EXP_ON_BOTL was set at compile time:
 showexp    display your accumulated experience points             [FALSE]
 
diff --git a/doc/Guidebook.mn b/doc/Guidebook.mn
index 8ac033d..a0edc2e 100644
--- a/doc/Guidebook.mn
+++ b/doc/Guidebook.mn
@@ -2031,6 +2031,9 @@ Specify the order to list object types in (default ``")[%?+!=/(*`0_'').
 The value of this option should be a string containing the
 symbols for the various object types.  Any omitted types are filled in
 at the end from the previous order.
+.lp paranoid_hit
+If true, asks you to type the word ``yes'' when hitting any peaceful
+monster, not just the letter ``y''.
 .lp perm_invent
 If true, always display your current inventory in a window.  This only
 makes sense for windowing system interfaces that implement this feature.
diff --git a/doc/Guidebook.tex b/doc/Guidebook.tex
index 9dd0be5..55a85ec 100644
--- a/doc/Guidebook.tex
+++ b/doc/Guidebook.tex
@@ -2491,6 +2491,10 @@ Specify the order to list object types in (default
 containing the symbols for the various object types.  Any omitted types
 are filled in at the end from the previous order.
 %.lp
+\item[\ib{paranoid\_hit}]
+If true, asks you to type the word ``yes'' when hitting any peaceful
+monster, not just the letter ``y''.
+%.lp
 \item[\ib{perm\_invent}]
 If true, always display your current inventory in a window.  This only
 makes sense for windowing system interfaces that implement this feature.
diff --git a/doc/Guidebook.txt b/doc/Guidebook.txt
index cfc0ed4..82a8eeb 100644
--- a/doc/Guidebook.txt
+++ b/doc/Guidebook.txt
@@ -2612,6 +2612,10 @@
             Any  omitted  types  are filled in at the end from the previous
             order.
 
+          paranoid_hit
+               If true, asks you to type the word ``yes'' when hitting any
+               peaceful monster, not just the letter ``y''.
+
           perm_invent
             If true, always display your current  inventory  in  a  window.
             This  only makes sense for windowing system interfaces that im-
diff --git a/include/flag.h b/include/flag.h
index cf2958c..efe778e 100644
--- a/include/flag.h
+++ b/include/flag.h
@@ -222,6 +222,9 @@ struct instance_flags {
 	boolean lan_mail;	/* mail is initialized */
 	boolean lan_mail_fetched; /* mail is awaiting display */
 #endif
+#ifdef PARANOID
+	boolean  paranoid_hit;  /* Ask for 'yes' when hitting peacefuls */
+#endif
 
 #if defined(HPMON) && defined(TEXTCOLOR)
         boolean use_hpmon;
diff --git a/src/options.c b/src/options.c
index 0e253b4..e767a83 100644
--- a/src/options.c
+++ b/src/options.c
@@ -155,6 +155,9 @@ static struct Bool_Opt
 #else
 	{"page_wait", (boolean *)0, FALSE, SET_IN_FILE},
 #endif
+#ifdef PARANOID
+	{"paranoid_hit", &iflags.paranoid_hit, FALSE, SET_IN_GAME},
+#endif
 	{"perm_invent", &flags.perm_invent, FALSE, SET_IN_GAME},
 	{"popup_dialog",  &iflags.wc_popup_dialog, FALSE, SET_IN_GAME},	/*WC*/
 	{"prayconfirm", &flags.prayconfirm, TRUE, SET_IN_GAME},
diff --git a/src/uhitm.c b/src/uhitm.c
index 3dd028a..4a980d6 100644
--- a/src/uhitm.c
+++ b/src/uhitm.c
@@ -99,6 +99,9 @@ register struct monst *mtmp;
 struct obj *wep;	/* uwep for attack(), null for kick_monster() */
 {
 	char qbuf[QBUFSZ];
+#ifdef PARANOID
+	char buf[BUFSZ];
+#endif
 
 	/* if you're close enough to attack, alert any waiting monster */
 	mtmp->mstrategy &= ~STRAT_WAITMASK;
@@ -199,11 +202,26 @@ struct obj *wep;	/* uwep for attack(), null for kick_monster() */
 			return(FALSE);
 		}
 		if (canspotmon(mtmp)) {
+#ifdef PARANOID
+			Sprintf(qbuf, "Really attack %s? [no/yes]",
+				mon_nam(mtmp));
+			if (iflags.paranoid_hit) {
+				getlin (qbuf, buf);
+				(void) lcase (buf);
+				if (strcmp (buf, "yes")) {
+				  flags.move = 0;
+				  return(TRUE);
+				}
+			} else {
+#endif
 			Sprintf(qbuf, "Really attack %s?", mon_nam(mtmp));
 			if (yn(qbuf) != 'y') {
 				flags.move = 0;
 				return(TRUE);
 			}
+#ifdef PARANOID
+			}
+#endif
 		}
 	}
 
